basePath: /api
definitions:
  models.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.NoteDTO:
    properties:
      description:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  models.RecipeDTO:
    properties:
      content:
        type: string
      title:
        type: string
      user_id:
        type: integer
    required:
    - content
    - title
    type: object
  models.RegisterDTO:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  utils.PaginatedMeta:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  utils.PaginatedResponses:
    properties:
      data: {}
      message:
        example: Successfully fetched notes
        type: string
      meta:
        $ref: '#/definitions/utils.PaginatedMeta'
      status:
        example: OK
        type: string
    type: object
  utils.StandardResponses:
    properties:
      data: {}
      errors:
        additionalProperties:
          type: string
        type: object
      message:
        example: Successfully fetched note
        type: string
      status:
        example: OK
        type: string
    type: object
host: service.pace11.my.id
info:
  contact:
    email: rppratama1771@gmail.com
    name: Pace Support
    url: https://www.linkedin.com/in/muhammad-iriansyah-putra-pratama-a0120514b/
  description: This is the API documentation for Pace Service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Pace Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LoginDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      summary: Login User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register User
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.RegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      summary: Register User
      tags:
      - Auth
  /comment/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment from database
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Delete a comment by ID
      tags:
      - Comments
  /comment/recipe/{id}:
    post:
      consumes:
      - application/json
      description: Create a new comment by recipe
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Create a comment by recipe
      tags:
      - Comments
  /comments/recipe/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all comments with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponses'
      security:
      - BearerAuth: []
      summary: Get list of comments by recipe
      tags:
      - Comments
  /like/recipe/{id}:
    post:
      consumes:
      - application/json
      description: Create a new like by recipe
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Create a like by recipe
      tags:
      - Likes
  /likes/recipe/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all likes with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponses'
      security:
      - BearerAuth: []
      summary: Get list of likes by recipe
      tags:
      - Likes
  /note:
    post:
      consumes:
      - application/json
      description: Create a new note with title and description
      parameters:
      - description: Create note payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.NoteDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      summary: Create a new note
      tags:
      - Notes
  /note/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a note from database
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      summary: Delete a note by ID
      tags:
      - Notes
    get:
      consumes:
      - application/json
      description: Get detail of a note by ID
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      summary: Get a single note by ID
      tags:
      - Notes
    patch:
      consumes:
      - application/json
      description: Update the title or description of a note
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update note payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.NoteDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      summary: Update a note by ID
      tags:
      - Notes
  /notes:
    get:
      consumes:
      - application/json
      description: Retrieve all notes with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponses'
      summary: Get list of notes
      tags:
      - Notes
  /notifications:
    get:
      consumes:
      - application/json
      description: Retrieve all notifications with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponses'
      summary: Get list of notifications
      tags:
      - Notifications
  /recipe:
    post:
      consumes:
      - application/json
      description: Create a new recipe with title and content
      parameters:
      - description: Create recipe payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.RecipeDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Create a new recipe
      tags:
      - Recipes
  /recipe/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a recipe from database
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Delete a recipe by ID
      tags:
      - Recipes
    get:
      consumes:
      - application/json
      description: Get detail of a recipe by ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponses'
      security:
      - BearerAuth: []
      summary: Get a single recipe by ID
      tags:
      - Recipes
    patch:
      consumes:
      - application/json
      description: Update the title or content of a recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update recipe payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.RecipeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Update a recipe by ID
      tags:
      - Recipes
  /recipe/save/{id}:
    post:
      consumes:
      - application/json
      description: Create a new recipe save with title and content
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Create a new recipe save
      tags:
      - Recipes
  /recipe/saves:
    get:
      consumes:
      - application/json
      description: Retrieve all recipes save with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponses'
      security:
      - BearerAuth: []
      summary: Get list of recipes save
      tags:
      - Recipes
  /recipes:
    get:
      consumes:
      - application/json
      description: Retrieve all recipes with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponses'
      security:
      - BearerAuth: []
      summary: Get list of recipes
      tags:
      - Recipes
  /unlike/recipe/{id}:
    post:
      consumes:
      - application/json
      description: Create an unlike by recipe
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Create an unlike by recipe
      tags:
      - Likes
  /user/me:
    get:
      consumes:
      - application/json
      description: Get detail user from jwt token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Get a user data
      tags:
      - User
  /user/update:
    get:
      consumes:
      - application/json
      description: Update user data from jwt token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.StandardResponses'
      security:
      - BearerAuth: []
      summary: Update user data
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
